#include <ntifs.h>
#include <ntddk.h>
#define NAKED __declspec(naked)

#define sfObDereferenceObject(object) {if(object != NULL){ObDereferenceObject(object);object = NULL;}}
#define sfExAllocatePool(size) ExAllocatePoolWithTag(NonPagedPool,size,'ytz')
#define sfCheckMemory(t) {if(t == NULL){KdPrint(("分配内存失败！\n"));return;}}
#define sfExFreePool(buffer){if(buffer != NULL){ExFreePoolWithTag(buffer,'ytz');buffer = NULL;}}
#define FailStatus(status) !NT_SUCCESS(status)

UCHAR AlertableCode[] =
"\x48\x89\xC8"
"\x48\x8B\x40\x4C"
"\x48\x83\xE0\x20"
"\xC3";

UCHAR QueueableCode[] =
"\x48\x89\xC8"
"\x48\x8B\x80\x00\x01\x00\x00"
"\x48\x83\xE0\x20"
"\xC3";

UCHAR GetLdrList[] =
"\x65\x48\x8B\x04\x25\x60\x00\x00\x00"
"\x48\x8B\x40\x18"
"\x48\x8B\x40\x10"
"\xC3";

UCHAR CallFunction[] =
"\x48\x83\xEC\x18"
"\xFF\xD2"
"\x48\x83\xC4\x18"
"\xC3";

UCHAR NormalCode[] =
"\x55"
"\x8B\xEC"
"\x81\xEC\x2C\x01\x00\x00"
"\x53"
"\x56"
"\x57"
"\x8D\xBD\xD4\xFE\xFF\xFF"
"\xB9\x4B\x00\x00\x00"
"\xB8\xCC\xCC\xCC\xCC"
"\xF3\xAB"
"\xC7\x45\xF8\x00\x00\x00\x00"
"\x8B\x45\x08"
"\x89\x45\xEC"
"\xC7\x45\xB0\x00\x00\x00\x00"
"\x64\xA1\x30\x00\x00\x00"
"\x8B\x40\x0C"
"\x8B\x40\x0C"
"\x89\x45\xF8"
"\x8B\x45\xF8"
"\x89\x45\xE0"
"\xB8\x01\x00\x00\x00"
"\x85\xC0"
"\x0F\x84\xE9\x00\x00\x00"
"\xB8\x02\x00\x00\x00"
"\x6B\xC8\x00"
"\x8B\x55\xE0"
"\x8B\x42\x30"
"\x0F\xB7\x0C\x08"
"\x83\xF9\x6B"
"\x0F\x85\xC1\x00\x00\x00"
"\xB8\x02\x00\x00\x00"
"\xC1\xE0\x00"
"\x8B\x4D\xE0"
"\x8B\x51\x30"
"\x0F\xB7\x04\x02"
"\x83\xF8\x65"
"\x0F\x85\xA6\x00\x00\x00"
"\xB8\x02\x00\x00\x00"
"\xD1\xE0"
"\x8B\x4D\xE0"
"\x8B\x51\x30"
"\x0F\xB7\x04\x02"
"\x83\xF8\x72"
"\x0F\x85\x8C\x00\x00\x00"
"\xB8\x02\x00\x00\x00"
"\x6B\xC8\x03"
"\x8B\x55\xE0"
"\x8B\x42\x30"
"\x0F\xB7\x0C\x08"
"\x83\xF9\x6E"
"\x75\x75"
"\xB8\x02\x00\x00\x00"
"\xC1\xE0\x02"
"\x8B\x4D\xE0"
"\x8B\x51\x30"
"\x0F\xB7\x04\x02"
"\x83\xF8\x65"
"\x75\x5E"
"\xB8\x02\x00\x00\x00"
"\x6B\xC8\x05"
"\x8B\x55\xE0"
"\x8B\x42\x30"
"\x0F\xB7\x0C\x08"
"\x83\xF9\x6C"
"\x75\x47"
"\xB8\x02\x00\x00\x00"
"\x6B\xC8\x06"
"\x8B\x55\xE0"
"\x8B\x42\x30"
"\x0F\xB7\x0C\x08"
"\x83\xF9\x33"
"\x75\x30"
"\xB8\x02\x00\x00\x00"
"\x6B\xC8\x07"
"\x8B\x55\xE0"
"\x8B\x42\x30"
"\x0F\xB7\x0C\x08"
"\x83\xF9\x32"
"\x75\x19"
"\xB8\x02\x00\x00\x00"
"\xC1\xE0\x03"
"\x8B\x4D\xE0"
"\x8B\x51\x30"
"\x0F\xB7\x04\x02"
"\x83\xF8\x2E"
"\x75\x02"
"\xEB\x0D"
"\x8B\x45\xE0"
"\x8B\x08"
"\x89\x4D\xE0"
"\xE9\x0A\xFF\xFF\xFF"
"\x8B\x45\xE0"
"\x8B\x48\x18"
"\x89\x4D\xF8"
"\x8B\x45\xE0"
"\x8B\x48\x18"
"\x8B\x55\xF8"
"\x03\x4A\x3C"
"\x89\x4D\xF8"
"\x8B\x45\xF8"
"\x83\xC0\x18"
"\x89\x45\xF8"
"\x8B\x45\xF8"
"\x83\xC0\x60"
"\x89\x45\xF8"
"\x8B\x45\xE0"
"\x8B\x48\x18"
"\x8B\x55\xF8"
"\x03\x0A"
"\x89\x4D\xF8"
"\x8B\x45\xE0"
"\x8B\x48\x18"
"\x8B\x55\xF8"
"\x03\x4A\x20"
"\x89\x4D\xD4"
"\x8B\x45\xE0"
"\x8B\x48\x18"
"\x8B\x55\xF8"
"\x03\x4A\x1C"
"\x89\x4D\xC8"
"\x8B\x45\xE0"
"\x8B\x48\x18"
"\x8B\x55\xF8"
"\x03\x4A\x24"
"\x89\x4D\xBC"
"\xB8\x01\x00\x00\x00"
"\x85\xC0"
"\x0F\x84\x4B\x01\x00\x00"
"\x8B\x45\xB0"
"\x8B\x4D\xD4"
"\x83\x3C\x81\x00"
"\x0F\x84\x2D\x01\x00\x00"
"\x8B\x45\xE0"
"\x8B\x48\x18"
"\x8B\x55\xB0"
"\x8B\x45\xD4"
"\x03\x0C\x90"
"\x89\x4D\xA4"
"\xB8\x01\x00\x00\x00"
"\x6B\xC8\x00"
"\x8B\x55\xA4"
"\x0F\xBE\x04\x0A"
"\x83\xF8\x4C"
"\x0F\x85\x03\x01\x00\x00"
"\xB8\x01\x00\x00\x00"
"\xC1\xE0\x00"
"\x8B\x4D\xA4"
"\x0F\xBE\x14\x01"
"\x83\xFA\x6F"
"\x0F\x85\xEB\x00\x00\x00"
"\xB8\x01\x00\x00\x00"
"\xD1\xE0"
"\x8B\x4D\xA4"
"\x0F\xBE\x14\x01"
"\x83\xFA\x61"
"\x0F\x85\xD4\x00\x00\x00"
"\xB8\x01\x00\x00\x00"
"\x6B\xC8\x03"
"\x8B\x55\xA4"
"\x0F\xBE\x04\x0A"
"\x83\xF8\x64"
"\x0F\x85\xBC\x00\x00\x00"
"\xB8\x01\x00\x00\x00"
"\xC1\xE0\x02"
"\x8B\x4D\xA4"
"\x0F\xBE\x14\x01"
"\x83\xFA\x4C"
"\x0F\x85\xA4\x00\x00\x00"
"\xB8\x01\x00\x00\x00"
"\x6B\xC8\x05"
"\x8B\x55\xA4"
"\x0F\xBE\x04\x0A"
"\x83\xF8\x69"
"\x0F\x85\x8C\x00\x00\x00"
"\xB8\x01\x00\x00\x00"
"\x6B\xC8\x06"
"\x8B\x55\xA4"
"\x0F\xBE\x04\x0A"
"\x83\xF8\x62"
"\x75\x78"
"\xB8\x01\x00\x00\x00"
"\x6B\xC8\x07"
"\x8B\x55\xA4"
"\x0F\xBE\x04\x0A"
"\x83\xF8\x72"
"\x75\x64"
"\xB8\x01\x00\x00\x00"
"\xC1\xE0\x03"
"\x8B\x4D\xA4"
"\x0F\xBE\x14\x01"
"\x83\xFA\x61"
"\x75\x50"
"\xB8\x01\x00\x00\x00"
"\x6B\xC8\x09"
"\x8B\x55\xA4"
"\x0F\xBE\x04\x0A"
"\x83\xF8\x72"
"\x75\x3C"
"\xB8\x01\x00\x00\x00"
"\x6B\xC8\x0A"
"\x8B\x55\xA4"
"\x0F\xBE\x04\x0A"
"\x83\xF8\x79"
"\x75\x28"
"\xB8\x01\x00\x00\x00"
"\x6B\xC8\x0B"
"\x8B\x55\xA4"
"\x0F\xBE\x04\x0A"
"\x83\xF8\x41"
"\x75\x14"
"\x8B\x45\xB0"
"\x8B\x4D\xC8"
"\x8B\x14\x81"
"\x8B\x45\xE0"
"\x03\x50\x18"
"\x89\x55\x98"
"\xEB\x0E"
"\x8B\x45\xB0"
"\x83\xC0\x01"
"\x89\x45\xB0"
"\xE9\xA8\xFE\xFF\xFF"
"\x8B\x5D\xEC"
"\x53"
"\x8B\x45\x98"
"\xFF\xD0"
"\x5F"
"\x5E"
"\x5B"
"\x81\xC4\x2C\x01\x00\x00"
"\x3B\xEC"
"\x8B\xE5"
"\x5D"
"\xC2\x0C\x00";

typedef ULONG_PTR(*JUDGEALERTABLE)(ULONG_PTR);

typedef ULONG_PTR(*JUDGEQUEUEABLE)(ULONG_PTR);

typedef ULONG_PTR(*GETLDRLIST)();

typedef VOID(*CALLFUNCTION)(ULONG_PTR, ULONG_PTR);

typedef enum _KAPC_ENVIRONMENT {
	OriginalApcEnvironment,											//原始的进程环境
	AttachedApcEnvironment,											//挂靠后的进程环境
	CurrentApcEnvironment,											//当前环境
	InsertApcEnvironment											//被插入时的环境
} KAPC_ENVIRONMENT;													//挂入APC时候的环境的枚举值

typedef struct _LDR_DATA_TABLE_ENTRY
{
	LIST_ENTRY InLoadOrderLinks;
	LIST_ENTRY InMemoryOrderLinks;
	LIST_ENTRY InInitializationOrderLinks;
	PVOID DllBase;
	PVOID EntryPoint;
	ULONG SizeOfImage;
	UNICODE_STRING FullDllName;
	UNICODE_STRING BaseDllName;
	ULONG Flags;
	USHORT LoadCount;
	USHORT
		TlsIndex;
	union
	{
		LIST_ENTRY HashLinks;
		struct
		{
			PVOID SectionPointer;
			ULONG CheckSum;
		};
	};
	union
	{
		ULONG TimeDateStamp;
		PVOID LoadedImports;
	};
	VOID * EntryPointActivationContext;
	PVOID PatchInformation;
	LIST_ENTRY ForwarderLinks;
	LIST_ENTRY ServiceTagLinks;
	LIST_ENTRY StaticLinks;
} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;

typedef VOID
(*KEINITIALIZEAPC)(
IN PRKAPC Apc,
IN PRKTHREAD Thread,
IN KAPC_ENVIRONMENT Environment,
IN PKKERNEL_ROUTINE KernelRoutine,
IN PKRUNDOWN_ROUTINE RundownRoutine OPTIONAL,
IN PKNORMAL_ROUTINE NormalRoutine OPTIONAL,
IN KPROCESSOR_MODE ApcMode OPTIONAL,
IN PVOID NormalContext OPTIONAL
);																	//初始化一个APC函数

typedef BOOLEAN
(*KEINSERTQUEUEAPC)(
IN PRKAPC Apc,
IN PVOID SystemArgument1,
IN PVOID SystemArgument2,
IN KPRIORITY Increment
);